#!/usr/bin/env python3
"""
Simple synchronous Telegram bot for FC Phones project.
Uses requests instead of python-telegram-bot to avoid compatibility issues.
"""

import os
import sys
import django
import time
import json
import requests
from pathlib import Path

# Add the project directory to Python path
project_dir = Path(__file__).resolve().parent
sys.path.insert(0, str(project_dir))

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fc_phones.settings')
django.setup()

import logging
from django.conf import settings
from devices.models import Device, Message, BatteryReport, TelegramUser
from devices.notifications import notify

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class SimpleTelegramBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.last_update_id = 0
        
    def get_updates(self):
        """Get updates from Telegram."""
        try:
            url = f"{self.base_url}/getUpdates"
            params = {
                'offset': self.last_update_id + 1,
                'timeout': 10
            }
            response = requests.get(url, params=params, timeout=15)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Error getting updates: {e}")
            return None
    
    def send_message(self, chat_id, text, parse_mode='Markdown'):
        """Send message to chat."""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': parse_mode
            }
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            return True
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return False
    
    def handle_start(self, update):
        """Handle /start command."""
        user = update['message']['from']
        chat_id = update['message']['chat']['id']
        
        try:
            telegram_user, created = TelegramUser.objects.get_or_create(
                user_id=user['id'],
                defaults={
                    'username': user.get('username'),
                    'first_name': user.get('first_name'),
                    'last_name': user.get('last_name'),
                }
            )
            
            if not created:
                telegram_user.username = user.get('username')
                telegram_user.first_name = user.get('first_name')
                telegram_user.last_name = user.get('last_name')
                telegram_user.is_active = True
                telegram_user.save()
            
            status_text = "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!" if created else "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
            
            message = (
                f'ü§ñ **–°–µ—Ä–≤–∏—Å –ê–ª–µ—Ä—Ç–æ–≤ FC Phones**\n\n'
                f'{status_text}\n\n'
                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                '/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                '/devices - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n'
                '/test - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n'
                '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n'
                'üîî –ó–¥–µ—Å—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤!'
            )
            
            self.send_message(chat_id, message)
            logger.info(f"User {user['id']} ({user.get('username')}) {'created' if created else 'updated'}")
            
        except Exception as e:
            logger.error(f"Error processing /start: {e}")
            self.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def handle_help(self, update):
        """Handle /help command."""
        chat_id = update['message']['chat']['id']
        message = (
            '**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n'
            '/start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
            '/devices - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n'
            '/test - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n'
            '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n'
            '**–û —Å–µ—Ä–≤–∏—Å–µ:**\n'
            '–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç –≤–∞—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤. '
            '–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ.'
        )
        self.send_message(chat_id, message)
    
    def handle_devices(self, update):
        """Handle /devices command."""
        chat_id = update['message']['chat']['id']
        
        try:
            devices = Device.objects.all()[:10]  # Limit to 10 devices
            
            if not devices:
                self.send_message(chat_id, '‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
                return
            
            message = 'üì± **–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:**\n\n'
            for device in devices:
                last_seen = device.last_seen.strftime('%d.%m.%Y %H:%M:%S') if device.last_seen else '–ù–∏–∫–æ–≥–¥–∞'
                status = 'üü¢ –û–Ω–ª–∞–π–Ω' if device.last_seen else 'üî¥ –û—Ñ–ª–∞–π–Ω'
                message += f'‚Ä¢ **{device.name}** {status}\n'
                message += f'  –¢–æ–∫–µ–Ω: `{device.token}`\n'
                message += f'  –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen}\n\n'
            
            self.send_message(chat_id, message)
            
        except Exception as e:
            logger.error(f"Error processing /devices: {e}")
            self.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
    
    def handle_test(self, update):
        """Handle /test command."""
        chat_id = update['message']['chat']['id']
        
        test_message = "üß™ <b>–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n"
        test_message += "üì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> –¢–µ—Å—Ç–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
        test_message += "‚è∞ <b>–í—Ä–µ–º—è:</b> –°–µ–π—á–∞—Å\n"
        test_message += "üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> –°–∏—Å—Ç–µ–º–∞\n\n"
        test_message += "üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∞–ª–µ—Ä—Ç–æ–≤."
        
        if notify(test_message):
            self.send_message(chat_id, '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
        else:
            self.send_message(chat_id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.')
    
    def handle_message(self, update):
        """Handle incoming message."""
        message = update['message']
        text = message.get('text', '')
        
        if text.startswith('/start'):
            self.handle_start(update)
        elif text.startswith('/help'):
            self.handle_help(update)
        elif text.startswith('/devices'):
            self.handle_devices(update)
        elif text.startswith('/test'):
            self.handle_test(update)
        else:
            # Unknown command
            chat_id = message['chat']['id']
            self.send_message(chat_id, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.')
    
    def run(self):
        """Main bot loop."""
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        while True:
            try:
                updates = self.get_updates()
                if not updates or not updates.get('ok'):
                    time.sleep(1)
                    continue
                
                for update in updates.get('result', []):
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        self.handle_message(update)
                
                time.sleep(0.1)  # Small delay to prevent overwhelming the API
                
            except KeyboardInterrupt:
                logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)  # Wait before retrying


def main():
    """Start the bot."""
    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not set in environment variables")
        return
    
    bot = SimpleTelegramBot(settings.TELEGRAM_BOT_TOKEN)
    bot.run()


if __name__ == '__main__':
    main()
