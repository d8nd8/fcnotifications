from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.db.models import Count, Q
from django.utils import timezone
from django.utils.translation import gettext_lazy as _
from django.contrib import messages
from django.shortcuts import redirect
from django.http import HttpRequest
from datetime import timedelta
from unfold.admin import ModelAdmin
from unfold.decorators import action
from .models import Device, Message, TelegramUser, NotificationFilter, AuthToken, LogFile, DeviceStatus
import secrets
import string


def dashboard_callback(request, context):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π dashboard –¥–ª—è Unfold"""
    now = timezone.now()
    yesterday = now - timedelta(days=1)
    week_ago = now - timedelta(days=7)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    total_devices = Device.objects.count()
    # –°—á–∏—Ç–∞–µ–º –æ–Ω–ª–∞–π–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —Ç–µ, —á—Ç–æ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    online_threshold = now - timedelta(hours=24)
    online_devices = Device.objects.filter(last_seen__gte=online_threshold).count()
    offline_devices = total_devices - online_devices
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    total_messages = Message.objects.count()
    today_messages = Message.objects.filter(created_at__gte=yesterday).count()
    week_messages = Message.objects.filter(created_at__gte=week_ago).count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç–∞—Ä–µ–∏ (–∏–∑ –æ—Ç—á–µ—Ç–æ–≤ –æ —Å—Ç–∞—Ç—É—Å–µ)
    recent_status_reports = DeviceStatus.objects.filter(created_at__gte=yesterday)
    low_battery_devices = recent_status_reports.filter(battery_level__lt=20).count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤
    total_logs = LogFile.objects.count()
    today_logs = LogFile.objects.filter(created_at__gte=yesterday).count()
    week_logs = LogFile.objects.filter(created_at__gte=week_ago).count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    success_status = recent_status_reports.filter(status_level='SUCCESS').count()
    attention_status = recent_status_reports.filter(status_level='ATTENTION').count()
    error_status = recent_status_reports.filter(status_level='ERROR').count()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –æ —Å—Ç–∞—Ç—É—Å–µ
    recent_status_qs = (
        DeviceStatus.objects.select_related("device")
        .order_by("-date_created")[:10]
    )
    recent_status = [
        {
            "device_name": s.device.name,
            "device_id": str(s.device.id),
            "status_level": s.status_level,
            "battery_level": s.battery_level,
            "is_charging": s.is_charging,
            "network_available": s.network_available,
            "reasons": s.reasons,
            "date_created": s.date_created,
        }
        for s in recent_status_qs
    ]
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–æ–≥)
    recent_messages_qs = (
        Message.objects.select_related("device")
        .order_by("-date_created")[:10]
    )
    recent_messages = [
        {
            "device_name": m.device.name,
            "device_id": str(m.device.id),
            "sender": m.sender,
            "text": m.text,
            "date_created": m.date_created,
        }
        for m in recent_messages_qs
    ]
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    recent_logs_qs = (
        LogFile.objects.select_related("device")
        .order_by("-date_created")[:5]
    )
    recent_logs = [
        {
            "device_name": l.device.name,
            "device_id": str(l.device.id),
            "file_name": l.file.name.split('/')[-1] if l.file else "No file",
            "file_url": l.file.url if l.file else None,
            "date_created": l.date_created,
        }
        for l in recent_logs_qs
    ]

    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è Unfold + –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü
    context.update({
        'title': 'üì± FC Phones - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'subtitle': '–°–µ—Ä–≤–∏—Å –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
        'devices_total': total_devices,
        'devices_online': online_devices,
        'devices_offline': offline_devices,
        'messages_today': today_messages,
        'messages_week': week_messages,
        'low_battery_count': low_battery_devices,
        'logs_total': total_logs,
        'logs_today': today_logs,
        'logs_week': week_logs,
        'success_status': success_status,
        'attention_status': attention_status,
        'error_status': error_status,
        'recent_messages': recent_messages,
        'recent_logs': recent_logs,
        'recent_status': recent_status,
    })
    
    return context


@admin.register(Device)
class DeviceAdmin(ModelAdmin):
    list_display = ['id_display', 'name', 'token_display', 'status_badge', 'last_seen']
    list_display_links = ['id_display']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ ID
    list_filter = ['created_at', 'last_seen']
    search_fields = ['name', 'token']
    readonly_fields = ['id', 'token', 'created_at', 'status_badge']
    list_per_page = 25
    actions_list = ["create_devices_action"]
    
    # –î–µ–ª–∞–µ–º –ø–æ–ª–µ name —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º –≤ —Å–ø–∏—Å–∫–µ
    list_editable = ['name']
    
    @action(description=_("üì± –°–æ–∑–¥–∞—Ç—å 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤"), url_path="create-devices", permissions=["add"])
    def create_devices_action(self, request: HttpRequest):
        """–°–æ–∑–¥–∞–µ—Ç 10 –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏"""
        try:
            created_devices = []
            for i in range(10):
                device = Device.objects.create(
                    name=f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {i+1}"
                )
                created_devices.append(device)
            
            messages.success(
                request, 
                f'‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤! –¢–æ–∫–µ–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
            )
            
        except Exception as e:
            messages.error(
                request, 
                f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {str(e)}'
            )
        
        return redirect(reverse('admin:devices_device_changelist'))
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related()
    
    def id_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ ID –∫–∞–∫ —Å—Å—ã–ª–∫—É"""
        return format_html(
            '<span style="font-family: monospace; font-size: 12px; color: #6b7280;">{}</span>',
            str(obj.id)[:8] + '...'
        )
    id_display.short_description = _('ID')
    
    def token_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω (–≤—ã–¥–µ–ª—è–µ–º—ã–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        return format_html(
            '<code style="background: #374151; color: #f3f4f6; padding: 4px 8px; border-radius: 6px; font-family: monospace; font-size: 12px; border: 1px solid #4b5563; user-select: all; cursor: text;" title="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è, –∑–∞—Ç–µ–º Ctrl+C –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è">{}</code>',
            str(obj.token)
        )
    token_display.short_description = _('–¢–æ–∫–µ–Ω')
    
    def status_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ
        now = timezone.now()
        time_threshold = now - timedelta(hours=24)
        
        if obj.last_seen and obj.last_seen >= time_threshold:
            return format_html(
                '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üü¢ –û–Ω–ª–∞–π–Ω</span>'
            )
        elif obj.last_seen:
            # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ, –Ω–æ –¥–∞–≤–Ω–æ
            hours_ago = int((now - obj.last_seen).total_seconds() / 3600)
            if hours_ago < 24:
                return format_html(
                    '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üü¢ –û–Ω–ª–∞–π–Ω</span>'
                )
            else:
                return format_html(
                    '<span style="background: #ff9800; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üü° {}—á –Ω–∞–∑–∞–¥</span>',
                    hours_ago
                )
        else:
            return format_html(
                '<span style="background: #f44336; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üî¥ –û—Ñ–ª–∞–π–Ω</span>'
            )
    status_badge.short_description = _('–°—Ç–∞—Ç—É—Å')


# BatteryReportAdmin —É–¥–∞–ª–µ–Ω - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ DeviceStatusAdmin


@admin.register(Message)
class MessageAdmin(ModelAdmin):
    list_display = ['device', 'sender', 'package_name', 'filtered_badge', 'text_preview', 'date_created', 'created_at']
    list_filter = ['date_created', 'created_at', 'is_filtered', 'package_name']
    search_fields = ['device__name', 'sender', 'text', 'package_name']
    readonly_fields = ['id', 'created_at', 'text_preview', 'filtered_badge']
    list_per_page = 25
    
    def text_preview(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = obj.text
        if len(text) > 50:
            text = text[:50] + '...'
        return format_html(
            '<div style="max-width: 300px; overflow: hidden; text-overflow: ellipsis;">{}</div>',
            text
        )
    text_preview.short_description = _('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    
    def filtered_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        if obj.is_filtered:
            return format_html(
                '<span style="background: #ff9800; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ</span>'
            )
        else:
            return format_html(
                '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</span>'
            )
    filtered_badge.short_description = _('–°—Ç–∞—Ç—É—Å')


@admin.register(NotificationFilter)
class NotificationFilterAdmin(ModelAdmin):
    list_display = ['package_name', 'description', 'filter_type_badge', 'is_active_badge', 'created_at']
    list_filter = ['filter_type', 'is_active', 'created_at']
    search_fields = ['package_name', 'description']
    readonly_fields = ['id', 'created_at', 'updated_at']
    list_per_page = 25
    
    def filter_type_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞"""
        if obj.filter_type == 'blacklist':
            return format_html(
                '<span style="background: #f44336; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</span>'
            )
        else:
            return format_html(
                '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚úÖ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</span>'
            )
    filter_type_badge.short_description = _('–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞')
    
    def is_active_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if obj.is_active:
            return format_html(
                '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>'
            )
        else:
            return format_html(
                '<span style="background: #9e9e9e; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>'
            )
    is_active_badge.short_description = _('–°—Ç–∞—Ç—É—Å')


@admin.register(TelegramUser)
class TelegramUserAdmin(ModelAdmin):
    list_display = ['user_display', 'username', 'is_active', 'last_activity', 'created_at']
    list_filter = ['is_active', 'created_at', 'last_activity']
    search_fields = ['username', 'first_name', 'last_name', 'user_id']
    readonly_fields = ['id', 'user_id', 'created_at', 'last_activity']
    list_per_page = 25
    def get_queryset(self, request):
        return super().get_queryset(request)
    
    def user_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        name = f"{obj.first_name} {obj.last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = f"@{obj.username}" if obj.username else "–ë–µ–∑ username"
        return format_html(
            '<div><strong>{}</strong><br><small style="color: #666;">{}</small></div>',
            name, username
        )
    user_display.short_description = _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')


@admin.register(AuthToken)
class AuthTokenAdmin(ModelAdmin):
    list_display = ['token', 'is_used_display', 'used_by_display', 'created_at', 'used_at']
    list_filter = ['is_used', 'created_at', 'used_at']
    search_fields = ['token', 'used_by__username', 'used_by__first_name']
    readonly_fields = ['id', 'created_at', 'used_at']
    list_per_page = 25
    actions_list = ['generate_token']
    
    def is_used_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
        if obj.is_used:
            return format_html(
                '<span style="background: #4caf50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</span>'
            )
        else:
            return format_html(
                '<span style="background: #ff9800; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚è≥ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</span>'
            )
    is_used_display.short_description = _('–°—Ç–∞—Ç—É—Å')
    
    def used_by_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–µ–≥–æ —Ç–æ–∫–µ–Ω"""
        if obj.used_by:
            return format_html(
                '<div><strong>{}</strong><br><small style="color: #666;">@{}</small></div>',
                f"{obj.used_by.first_name} {obj.used_by.last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏",
                obj.used_by.username or "–ë–µ–∑ username"
            )
        return "‚Äî"
    used_by_display.short_description = _('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    
    @action(description=_("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"), url_path="generate-token", permissions=["add"])
    def generate_token(self, request):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        while True:
            token = ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(16))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —É–Ω–∏–∫–∞–ª–µ–Ω
            if not AuthToken.objects.filter(token=token).exists():
                break
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        AuthToken.objects.create(token=token)
        
        messages.success(request, f'–¢–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {token}')
        return redirect(reverse('admin:devices_authtoken_changelist'))


@admin.register(LogFile)
class LogFileAdmin(ModelAdmin):
    list_display = ['device_name', 'file', 'date_created']
    list_filter = ['date_created', 'device']
    search_fields = ['device__name', 'file']
    readonly_fields = ['id', 'created_at', 'device_name']
    list_per_page = 25
    
    def device_name(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        return obj.device.name
    device_name.short_description = _('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')


@admin.register(DeviceStatus)
class DeviceStatusAdmin(ModelAdmin):
    list_display = ['device', 'status_badge', 'battery_level_display', 'is_charging_badge', 
                   'network_available_badge', 'unsent_notifications', 'app_version_display', 
                   'android_version_display', 'device_model', 'date_created']
    list_filter = ['status_level', 'is_charging', 'network_available', 'date_created', 'created_at', 
                   'device_model', 'app_version', 'android_version']
    search_fields = ['device__name', 'device__token', 'app_version', 'android_version', 'device_model']
    readonly_fields = ['id', 'created_at', 'reasons_display', 'timestamp_display', 'last_notification_display']
    list_per_page = 25
    ordering = ['-date_created']
    actions_list = ['export_status_reports', 'mark_as_attention']
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    fieldsets = (
        ('üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', {
            'fields': ('device', 'device_model', 'app_version', 'android_version')
        }),
        ('üìä –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—á–∏–Ω—ã', {
            'fields': ('status_level', 'reasons_display')
        }),
        ('üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏', {
            'fields': ('battery_level', 'is_charging')
        }),
        ('üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('network_available', 'unsent_notifications', 'last_notification_display')
        }),
        ('‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('timestamp_display', 'date_created', 'created_at')
        }),
        ('üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('id',),
            'classes': ('collapse',)
        })
    )
    
    def status_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
        status_colors = {
            'SUCCESS': '#4CAF50',  # –ó–µ–ª–µ–Ω—ã–π
            'ATTENTION': '#FF9800',  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'ERROR': '#f44336'  # –ö—Ä–∞—Å–Ω—ã–π
        }
        status_icons = {
            'SUCCESS': '‚úÖ',
            'ATTENTION': '‚ö†Ô∏è',
            'ERROR': '‚ùå'
        }
        
        color = status_colors.get(obj.status_level, '#9e9e9e')
        icon = status_icons.get(obj.status_level, '‚ùì')
        
        return format_html(
            '<span style="background: {}; color: white; padding: 4px 8px; border-radius: 12px; font-size: 11px; font-weight: bold;">{} {}</span>',
            color, icon, obj.get_status_level_display()
        )
    status_badge.short_description = _('–°—Ç–∞—Ç—É—Å')
    
    def battery_level_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
        level = obj.battery_level
        charging_icon = 'üîå' if obj.is_charging else 'üîã'
        
        if level > 50:
            color = '#4CAF50'  # –ó–µ–ª–µ–Ω—ã–π
        elif level > 20:
            color = '#FF9800'  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            color = '#f44336'  # –ö—Ä–∞—Å–Ω—ã–π
            
        return format_html(
            '<div style="display: flex; align-items: center;">'
            '<div style="width: 60px; background: #e0e0e0; height: 8px; border-radius: 4px; margin-right: 8px;">'
            '<div style="width: {}%; background: {}; height: 100%; border-radius: 4px;"></div>'
            '</div>'
            '<span style="font-weight: bold; color: {};">{}% {}</span>'
            '</div>',
            level, color, color, level, charging_icon
        )
    battery_level_display.short_description = _('–ë–∞—Ç–∞—Ä–µ—è')
    
    def is_charging_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—Ä—è–¥–∫–∏"""
        if obj.is_charging:
            return format_html(
                '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üîå –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è</span>'
            )
        else:
            return format_html(
                '<span style="background: #9e9e9e; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üîã –ù–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è</span>'
            )
    is_charging_badge.short_description = _('–ó–∞—Ä—è–¥–∫–∞')
    
    def network_available_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏"""
        if obj.network_available:
            return format_html(
                '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üåê –û–Ω–ª–∞–π–Ω</span>'
            )
        else:
            return format_html(
                '<span style="background: #f44336; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚ùå –û—Ñ–ª–∞–π–Ω</span>'
            )
    network_available_badge.short_description = _('–°–µ—Ç—å')
    
    def reasons_display(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        if not obj.reasons:
            return "–ù–µ—Ç –ø—Ä–∏—á–∏–Ω"
        
        reasons_html = '<ul style="margin: 0; padding-left: 20px;">'
        for reason in obj.reasons:
            reasons_html += f'<li style="margin-bottom: 4px;">{reason}</li>'
        reasons_html += '</ul>'
        
        return format_html(reasons_html)
    reasons_display.short_description = _('–ü—Ä–∏—á–∏–Ω—ã —Å—Ç–∞—Ç—É—Å–∞')
    
    def timestamp_display(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        from datetime import datetime
        try:
            dt = datetime.fromtimestamp(obj.timestamp / 1000)
            return dt.strftime('%d.%m.%Y %H:%M:%S')
        except (ValueError, TypeError):
            return "–ù–µ–≤–µ—Ä–Ω—ã–π timestamp"
    timestamp_display.short_description = _('–í—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞')
    
    def app_version_display(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if obj.app_version:
            return format_html(
                '<span style="background: #e3f2fd; color: #1976d2; padding: 2px 6px; border-radius: 4px; font-size: 11px; font-family: monospace;">{}</span>',
                obj.app_version
            )
        return "‚Äî"
    app_version_display.short_description = _('–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    
    def android_version_display(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é Android"""
        if obj.android_version:
            return format_html(
                '<span style="background: #e8f5e8; color: #2e7d32; padding: 2px 6px; border-radius: 4px; font-size: 11px; font-family: monospace;">{}</span>',
                obj.android_version
            )
        return "‚Äî"
    android_version_display.short_description = _('Android –≤–µ—Ä—Å–∏—è')
    
    def last_notification_display(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if obj.last_notification_timestamp:
            return format_html(
                '<span style="color: #666; font-size: 12px;">{}</span>',
                obj.last_notification_timestamp.strftime('%d.%m.%Y %H:%M:%S')
            )
        return format_html(
            '<span style="color: #999; font-style: italic;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>'
        )
    last_notification_display.short_description = _('–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('device')
    
    @action(description=_("üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –æ —Å—Ç–∞—Ç—É—Å–µ"), url_path="export-status", permissions=["view"])
    def export_status_reports(self, request: HttpRequest):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ —Å—Ç–∞—Ç—É—Å–µ –≤ CSV"""
        try:
            import csv
            from django.http import HttpResponse
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏
            selected_ids = request.session.get('selected_status_ids', [])
            if not selected_ids:
                messages.warning(request, '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
                return redirect(reverse('admin:devices_devicestatus_changelist'))
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            status_reports = DeviceStatus.objects.filter(id__in=selected_ids).select_related('device')
            
            # –°–æ–∑–¥–∞–µ–º HTTP –æ—Ç–≤–µ—Ç —Å CSV
            response = HttpResponse(content_type='text/csv; charset=utf-8')
            response['Content-Disposition'] = 'attachment; filename="device_status_reports.csv"'
            
            # –°–æ–∑–¥–∞–µ–º CSV writer
            writer = csv.writer(response)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–°—Ç–∞—Ç—É—Å', '–ë–∞—Ç–∞—Ä–µ—è %', '–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è', '–°–µ—Ç—å', 
                '–ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö', '–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'Android –≤–µ—Ä—Å–∏—è', 
                '–ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', '–ü—Ä–∏—á–∏–Ω—ã', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
            ])
            
            # –î–∞–Ω–Ω—ã–µ
            for report in status_reports:
                writer.writerow([
                    report.device.name,
                    report.get_status_level_display(),
                    report.battery_level,
                    '–î–∞' if report.is_charging else '–ù–µ—Ç',
                    '–î–∞' if report.network_available else '–ù–µ—Ç',
                    report.unsent_notifications,
                    report.app_version or '',
                    report.android_version or '',
                    report.device_model or '',
                    '; '.join(report.reasons) if report.reasons else '',
                    report.date_created.strftime('%d.%m.%Y %H:%M:%S')
                ])
            
            messages.success(request, f'–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(status_reports)} –æ—Ç—á–µ—Ç–æ–≤')
            return response
            
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}')
            return redirect(reverse('admin:devices_devicestatus_changelist'))
    
    @action(description=_("‚ö†Ô∏è –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è"), url_path="mark-attention", permissions=["change"])
    def mark_as_attention(self, request: HttpRequest):
        """–ü–æ–º–µ—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è"""
        try:
            selected_ids = request.session.get('selected_status_ids', [])
            if not selected_ids:
                messages.warning(request, '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞')
                return redirect(reverse('admin:devices_devicestatus_changelist'))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            updated_count = DeviceStatus.objects.filter(id__in=selected_ids).update(
                status_level='ATTENTION'
            )
            
            messages.success(request, f'–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –æ—Ç—á–µ—Ç–æ–≤')
            
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}')
        
        return redirect(reverse('admin:devices_devicestatus_changelist'))

