from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.db.models import Count, Q
from django.utils import timezone
from django.utils.translation import gettext_lazy as _
from django.contrib import messages
from django.shortcuts import redirect
from django.http import HttpRequest
from datetime import timedelta
from unfold.admin import ModelAdmin
from unfold.decorators import action
from .models import Device, BatteryReport, Message, TelegramUser, NotificationFilter, AuthToken, LogFile
import secrets
import string


def dashboard_callback(request, context):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π dashboard –¥–ª—è Unfold"""
    now = timezone.now()
    yesterday = now - timedelta(days=1)
    week_ago = now - timedelta(days=7)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    total_devices = Device.objects.count()
    # –°—á–∏—Ç–∞–µ–º –æ–Ω–ª–∞–π–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —Ç–µ, —á—Ç–æ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    online_threshold = now - timedelta(hours=24)
    online_devices = Device.objects.filter(last_seen__gte=online_threshold).count()
    offline_devices = total_devices - online_devices
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    total_messages = Message.objects.count()
    today_messages = Message.objects.filter(created_at__gte=yesterday).count()
    week_messages = Message.objects.filter(created_at__gte=week_ago).count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç–∞—Ä–µ–∏
    recent_battery_reports = BatteryReport.objects.filter(created_at__gte=yesterday)
    low_battery_devices = recent_battery_reports.filter(battery_level__lt=20).count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤
    total_logs = LogFile.objects.count()
    today_logs = LogFile.objects.filter(created_at__gte=yesterday).count()
    week_logs = LogFile.objects.filter(created_at__gte=week_ago).count()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–æ–≥)
    recent_messages_qs = (
        Message.objects.select_related("device")
        .order_by("-date_created")[:10]
    )
    recent_messages = [
        {
            "device_name": m.device.name,
            "device_id": str(m.device.id),
            "sender": m.sender,
            "text": m.text,
            "date_created": m.date_created,
        }
        for m in recent_messages_qs
    ]
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    recent_logs_qs = (
        LogFile.objects.select_related("device")
        .order_by("-date_created")[:5]
    )
    recent_logs = [
        {
            "device_name": l.device.name,
            "device_id": str(l.device.id),
            "file_name": l.file.name.split('/')[-1] if l.file else "No file",
            "file_url": l.file.url if l.file else None,
            "date_created": l.date_created,
        }
        for l in recent_logs_qs
    ]

    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è Unfold + –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü
    context.update({
        'title': 'üì± FC Phones - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'subtitle': '–°–µ—Ä–≤–∏—Å –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
        'devices_total': total_devices,
        'devices_online': online_devices,
        'devices_offline': offline_devices,
        'messages_today': today_messages,
        'messages_week': week_messages,
        'low_battery_count': low_battery_devices,
        'logs_total': total_logs,
        'logs_today': today_logs,
        'logs_week': week_logs,
        'recent_messages': recent_messages,
        'recent_logs': recent_logs,
    })
    
    return context


@admin.register(Device)
class DeviceAdmin(ModelAdmin):
    list_display = ['id_display', 'name', 'token_display', 'status_badge', 'last_seen']
    list_display_links = ['id_display']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ ID
    list_filter = ['created_at', 'last_seen']
    search_fields = ['name', 'token']
    readonly_fields = ['id', 'token', 'created_at', 'status_badge']
    list_per_page = 25
    actions_list = ["create_devices_action"]
    
    # –î–µ–ª–∞–µ–º –ø–æ–ª–µ name —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º –≤ —Å–ø–∏—Å–∫–µ
    list_editable = ['name']
    
    @action(description=_("üì± –°–æ–∑–¥–∞—Ç—å 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤"), url_path="create-devices", permissions=["add"])
    def create_devices_action(self, request: HttpRequest):
        """–°–æ–∑–¥–∞–µ—Ç 10 –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏"""
        try:
            created_devices = []
            for i in range(10):
                device = Device.objects.create(
                    name=f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {i+1}"
                )
                created_devices.append(device)
            
            messages.success(
                request, 
                f'‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤! –¢–æ–∫–µ–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
            )
            
        except Exception as e:
            messages.error(
                request, 
                f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {str(e)}'
            )
        
        return redirect(reverse('admin:devices_device_changelist'))
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related()
    
    def id_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ ID –∫–∞–∫ —Å—Å—ã–ª–∫—É"""
        return format_html(
            '<span style="font-family: monospace; font-size: 12px; color: #6b7280;">{}</span>',
            str(obj.id)[:8] + '...'
        )
    id_display.short_description = _('ID')
    
    def token_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω (–≤—ã–¥–µ–ª—è–µ–º—ã–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        return format_html(
            '<code style="background: #374151; color: #f3f4f6; padding: 4px 8px; border-radius: 6px; font-family: monospace; font-size: 12px; border: 1px solid #4b5563; user-select: all; cursor: text;" title="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è, –∑–∞—Ç–µ–º Ctrl+C –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è">{}</code>',
            str(obj.token)
        )
    token_display.short_description = _('–¢–æ–∫–µ–Ω')
    
    def status_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ
        now = timezone.now()
        time_threshold = now - timedelta(hours=24)
        
        if obj.last_seen and obj.last_seen >= time_threshold:
            return format_html(
                '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üü¢ –û–Ω–ª–∞–π–Ω</span>'
            )
        elif obj.last_seen:
            # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ, –Ω–æ –¥–∞–≤–Ω–æ
            hours_ago = int((now - obj.last_seen).total_seconds() / 3600)
            if hours_ago < 24:
                return format_html(
                    '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üü¢ –û–Ω–ª–∞–π–Ω</span>'
                )
            else:
                return format_html(
                    '<span style="background: #ff9800; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üü° {}—á –Ω–∞–∑–∞–¥</span>',
                    hours_ago
                )
        else:
            return format_html(
                '<span style="background: #f44336; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üî¥ –û—Ñ–ª–∞–π–Ω</span>'
            )
    status_badge.short_description = _('–°—Ç–∞—Ç—É—Å')


@admin.register(BatteryReport)
class BatteryReportAdmin(ModelAdmin):
    list_display = ['device', 'battery_level_display', 'date_created', 'created_at']
    list_filter = ['date_created', 'created_at', 'battery_level']
    search_fields = ['device__name', 'device__token']
    readonly_fields = ['id', 'created_at']
    list_per_page = 25
    
    def battery_level_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
        level = obj.battery_level
        if level > 50:
            color = '#4CAF50'  # –ó–µ–ª–µ–Ω—ã–π
        elif level > 20:
            color = '#FF9800'  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            color = '#f44336'  # –ö—Ä–∞—Å–Ω—ã–π
            
        return format_html(
            '<div style="display: flex; align-items: center;">'
            '<div style="width: 60px; background: #e0e0e0; height: 8px; border-radius: 4px; margin-right: 8px;">'
            '<div style="width: {}%; background: {}; height: 100%; border-radius: 4px;"></div>'
            '</div>'
            '<span style="font-weight: bold; color: {};">{}%</span>'
            '</div>',
            level, color, color, level
        )
    battery_level_display.short_description = _('–£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏')


@admin.register(Message)
class MessageAdmin(ModelAdmin):
    list_display = ['device', 'sender', 'package_name', 'filtered_badge', 'text_preview', 'date_created', 'created_at']
    list_filter = ['date_created', 'created_at', 'is_filtered', 'package_name']
    search_fields = ['device__name', 'sender', 'text', 'package_name']
    readonly_fields = ['id', 'created_at', 'text_preview', 'filtered_badge']
    list_per_page = 25
    
    def text_preview(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = obj.text
        if len(text) > 50:
            text = text[:50] + '...'
        return format_html(
            '<div style="max-width: 300px; overflow: hidden; text-overflow: ellipsis;">{}</div>',
            text
        )
    text_preview.short_description = _('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    
    def filtered_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        if obj.is_filtered:
            return format_html(
                '<span style="background: #ff9800; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ</span>'
            )
        else:
            return format_html(
                '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</span>'
            )
    filtered_badge.short_description = _('–°—Ç–∞—Ç—É—Å')


@admin.register(NotificationFilter)
class NotificationFilterAdmin(ModelAdmin):
    list_display = ['package_name', 'description', 'filter_type_badge', 'is_active_badge', 'created_at']
    list_filter = ['filter_type', 'is_active', 'created_at']
    search_fields = ['package_name', 'description']
    readonly_fields = ['id', 'created_at', 'updated_at']
    list_per_page = 25
    
    def filter_type_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞"""
        if obj.filter_type == 'blacklist':
            return format_html(
                '<span style="background: #f44336; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</span>'
            )
        else:
            return format_html(
                '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚úÖ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</span>'
            )
    filter_type_badge.short_description = _('–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞')
    
    def is_active_badge(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if obj.is_active:
            return format_html(
                '<span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>'
            )
        else:
            return format_html(
                '<span style="background: #9e9e9e; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>'
            )
    is_active_badge.short_description = _('–°—Ç–∞—Ç—É—Å')


@admin.register(TelegramUser)
class TelegramUserAdmin(ModelAdmin):
    list_display = ['user_display', 'username', 'is_active', 'last_activity', 'created_at']
    list_filter = ['is_active', 'created_at', 'last_activity']
    search_fields = ['username', 'first_name', 'last_name', 'user_id']
    readonly_fields = ['id', 'user_id', 'created_at', 'last_activity']
    list_per_page = 25
    def get_queryset(self, request):
        return super().get_queryset(request)
    
    def user_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        name = f"{obj.first_name} {obj.last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = f"@{obj.username}" if obj.username else "–ë–µ–∑ username"
        return format_html(
            '<div><strong>{}</strong><br><small style="color: #666;">{}</small></div>',
            name, username
        )
    user_display.short_description = _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')


@admin.register(AuthToken)
class AuthTokenAdmin(ModelAdmin):
    list_display = ['token', 'is_used_display', 'used_by_display', 'created_at', 'used_at']
    list_filter = ['is_used', 'created_at', 'used_at']
    search_fields = ['token', 'used_by__username', 'used_by__first_name']
    readonly_fields = ['id', 'created_at', 'used_at']
    list_per_page = 25
    actions_list = ['generate_token']
    
    def is_used_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
        if obj.is_used:
            return format_html(
                '<span style="background: #4caf50; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</span>'
            )
        else:
            return format_html(
                '<span style="background: #ff9800; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px;">‚è≥ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</span>'
            )
    is_used_display.short_description = _('–°—Ç–∞—Ç—É—Å')
    
    def used_by_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–µ–≥–æ —Ç–æ–∫–µ–Ω"""
        if obj.used_by:
            return format_html(
                '<div><strong>{}</strong><br><small style="color: #666;">@{}</small></div>',
                f"{obj.used_by.first_name} {obj.used_by.last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏",
                obj.used_by.username or "–ë–µ–∑ username"
            )
        return "‚Äî"
    used_by_display.short_description = _('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    
    @action(description=_("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"), url_path="generate-token", permissions=["add"])
    def generate_token(self, request):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        while True:
            token = ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(16))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —É–Ω–∏–∫–∞–ª–µ–Ω
            if not AuthToken.objects.filter(token=token).exists():
                break
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        AuthToken.objects.create(token=token)
        
        messages.success(request, f'–¢–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {token}')
        return redirect(reverse('admin:devices_authtoken_changelist'))


@admin.register(LogFile)
class LogFileAdmin(ModelAdmin):
    list_display = ['device_name', 'file', 'date_created']
    list_filter = ['date_created', 'device']
    search_fields = ['device__name', 'file']
    readonly_fields = ['id', 'created_at', 'device_name']
    list_per_page = 25
    
    def device_name(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        return obj.device.name
    device_name.short_description = _('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')

