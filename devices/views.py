from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from django.utils import timezone
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from .models import Device, BatteryReport, Message, LogFile, DeviceStatus
from .serializers import DeviceSerializer, MessageSerializer, LogFileSerializer, DeviceStatusSerializer
from .notifications import notify
from .notification_filter import NotificationFilterService
from .status_calculator import DeviceStatusCalculator


class DeviceView(APIView):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    """
    permission_classes = [IsAuthenticated]
    
    @swagger_auto_schema(
        operation_summary="üì± –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        operation_description="""
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
        
        **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ `X-TOKEN` —Å —Ç–æ–∫–µ–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: 
        - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """,
        tags=['–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'],
        responses={
            200: openapi.Response(
                description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞",
                schema=DeviceSerializer,
                examples={
                    "application/json": {
                        "id": "550e8400-e29b-41d4-a716-446655440000",
                        "external_id": "device_12345",
                        "token": "abc123def456ghi789",
                        "name": "–ú–æ–π iPhone",
                        "last_seen": "2024-01-15T14:30:25Z",
                        "created_at": "2024-01-01T10:00:00Z"
                    }
                }
            ),
            401: openapi.Response(
                description="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                examples={
                    "application/json": {
                        "detail": "Authentication credentials were not provided."
                    }
                }
            )
        },
        manual_parameters=[
            openapi.Parameter(
                'X-TOKEN',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                type=openapi.TYPE_STRING,
                required=True,
                example="abc123def456ghi789"
            )
        ]
    )
    def get(self, request):
        device = request.user  # This will be the Device instance from XTokenAuthentication
        serializer = DeviceSerializer(device)
        return Response(serializer.data, status=status.HTTP_200_OK)


class SimpleBatteryReportView(APIView):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    """
    permission_classes = []  # –£–±–∏—Ä–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    @swagger_auto_schema(
        operation_summary="üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        operation_description="""
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –±–∞—Ç–∞—Ä–µ–∏, —Ç–∞–∫ –∏ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ.
        
        **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**:
        - –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        - –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞—Ç–∞—Ä–µ–µ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        
        **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**:
        - `token` - —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        - `battery_level` - —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ 0-100
        
        **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞**:
        - `is_charging` - –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        - `network_available` - –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
        - `unsent_notifications` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        - `last_notification_timestamp` - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        - `timestamp` - –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ (UNIX –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
        - `app_version` - –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        - `android_version` - –≤–µ—Ä—Å–∏—è Android
        - `device_model` - –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        - `reasons` - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω —Å—Ç–∞—Ç—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        - `status_level` - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ SUCCESS/ATTENTION/ERROR (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        
        **–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –ø–æ–ª—è**:
        - `device_id` - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        - `status_level` - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (SUCCESS, ATTENTION, ERROR)
        - `reasons` - —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        - `battery_level` - —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        - `is_charging` - –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–µ–π—á–∞—Å
        - `network_available` - –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
        - `unsent_notifications` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        - `last_notification_timestamp` - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        - `timestamp` - –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö UNIX)
        - `app_version` - –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        - `android_version` - –≤–µ—Ä—Å–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Android
        - `device_model` - –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        """,
        tags=['–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['token', 'battery_level'],
            properties={
                'token': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description='–¢–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
                    example='6f4d3982-2a0c-460b-95d6-7daaaf2b6f39'
                ),
                'battery_level': openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description='–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)',
                    minimum=0,
                    maximum=100,
                    example=85
                ),
                'is_charging': openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    description='–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–µ–π—á–∞—Å',
                    example=True
                ),
                'network_available': openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    description='–ï—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
                    example=True
                ),
                'unsent_notifications': openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                    minimum=0,
                    example=0
                ),
                'last_notification_timestamp': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    format=openapi.FORMAT_DATETIME,
                    description='–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (ISO 8601)',
                    example='2024-01-15T14:30:25Z'
                ),
                'timestamp': openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description='–í—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö UNIX',
                    example=1705327825000
                ),
                'app_version': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description='–í–µ—Ä—Å–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                    example='1.2.3'
                ),
                'android_version': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description='–í–µ—Ä—Å–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Android',
                    example='Android 14'
                ),
                'device_model': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description='–ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
                    example='Samsung Galaxy S23'
                ),
                'reasons': openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Schema(type=openapi.TYPE_STRING),
                    description='–°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)',
                    example=['–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É']
                ),
                'status_level': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    enum=['SUCCESS', 'ATTENTION', 'ERROR'],
                    description='–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)',
                    example='SUCCESS'
                )
            }
        ),
        responses={
            200: openapi.Response(
                description="–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                examples={
                    "application/json": {
                        "success": True,
                        "message": "–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                        "device_id": "550e8400-e29b-41d4-a716-446655440000",
                        "device_name": "–ú–æ–π iPhone",
                        "status_level": "SUCCESS",
                        "reasons": ["–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"],
                        "battery_level": 85,
                        "is_charging": True,
                        "network_available": True,
                        "unsent_notifications": 0,
                        "last_notification_timestamp": "2024-01-15T14:30:25Z",
                        "timestamp": 1705327825000,
                        "app_version": "1.2.3",
                        "android_version": "Android 14",
                        "device_model": "Samsung Galaxy S23",
                        "battery_report_id": "550e8400-e29b-41d4-a716-446655440001",
                        "status_report_id": "550e8400-e29b-41d4-a716-446655440002"
                    }
                }
            ),
            400: openapi.Response(
                description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                examples={
                    "application/json": {
                        "success": False,
                        "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏"
                    }
                }
            ),
            404: openapi.Response(
                description="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                examples={
                    "application/json": {
                        "success": False,
                        "error": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    }
                }
            )
        }
    )
    def post(self, request):
        token = request.data.get('token')
        battery_level = request.data.get('battery_level')
        
        if not token:
            return Response({
                'success': False,
                'error': '–¢–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        if not battery_level or not isinstance(battery_level, int):
            return Response({
                'success': False,
                'error': '–£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        if battery_level < 0 or battery_level > 100:
            return Response({
                'success': False,
                'error': '–£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            device = Device.objects.get(token=token)
        except Device.DoesNotExist:
            return Response({
                'success': False,
                'error': '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }, status=status.HTTP_404_NOT_FOUND)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        is_charging = request.data.get('is_charging', False)
        network_available = request.data.get('network_available', True)
        unsent_notifications = request.data.get('unsent_notifications', 0)
        last_notification_timestamp = request.data.get('last_notification_timestamp')
        timestamp = request.data.get('timestamp', int(timezone.now().timestamp() * 1000))
        app_version = request.data.get('app_version', '')
        android_version = request.data.get('android_version', '')
        device_model = request.data.get('device_model', '')
        custom_reasons = request.data.get('reasons', [])
        custom_status_level = request.data.get('status_level')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è status_level –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if custom_status_level and custom_status_level not in ['SUCCESS', 'ATTENTION', 'ERROR']:
            return Response({
                'success': False,
                'error': 'status_level –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: SUCCESS, ATTENTION, ERROR'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # –ü–∞—Ä—Å–∏–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
        if last_notification_timestamp:
            try:
                from django.utils.dateparse import parse_datetime
                last_notification_timestamp = parse_datetime(last_notification_timestamp)
            except (ValueError, TypeError):
                last_notification_timestamp = None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if custom_status_level and custom_reasons:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏ —Å—Ç–∞—Ç—É—Å, –∏ –ø—Ä–∏—á–∏–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            status_level = custom_status_level
            reasons = custom_reasons
        elif custom_status_level:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –ø—Ä–∏—á–∏–Ω—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            _, reasons = DeviceStatusCalculator.calculate_status_level(
                battery_level=battery_level,
                is_charging=is_charging,
                network_available=network_available,
                unsent_notifications=unsent_notifications,
                last_notification_timestamp=last_notification_timestamp
            )
            status_level = custom_status_level
        elif custom_reasons:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏—á–∏–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            status_level, _ = DeviceStatusCalculator.calculate_status_level(
                battery_level=battery_level,
                is_charging=is_charging,
                network_available=network_available,
                unsent_notifications=unsent_notifications,
                last_notification_timestamp=last_notification_timestamp
            )
            reasons = custom_reasons
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            status_level, reasons = DeviceStatusCalculator.calculate_status_level(
                battery_level=battery_level,
                is_charging=is_charging,
                network_available=network_available,
                unsent_notifications=unsent_notifications,
                last_notification_timestamp=last_notification_timestamp
            )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –±–∞—Ç–∞—Ä–µ–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        battery_report = BatteryReport.objects.create(
            device=device,
            battery_level=battery_level
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_status = DeviceStatus.objects.create(
            device=device,
            status_level=status_level,
            reasons=reasons,
            battery_level=battery_level,
            is_charging=is_charging,
            network_available=network_available,
            unsent_notifications=unsent_notifications,
            last_notification_timestamp=last_notification_timestamp,
            timestamp=timestamp,
            app_version=app_version,
            android_version=android_version,
            device_model=device_model
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º last_seen —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device.last_seen = timezone.now()
        device.save(update_fields=['last_seen'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
        if status_level in ['ATTENTION', 'ERROR']:
            status_display = DeviceStatusCalculator.get_status_display(status_level)
            notification_text = f"üìä <b>–°–¢–ê–¢–£–° –£–°–¢–†–û–ô–°–¢–í–ê</b>\n\n"
            notification_text += f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.name}\n"
            notification_text += f"‚è∞ –í—Ä–µ–º—è: {timezone.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            notification_text += f"üîã –ë–∞—Ç–∞—Ä–µ—è: {battery_level}% {'üîå' if is_charging else 'üîã'}\n"
            notification_text += f"üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {'‚úÖ' if network_available else '‚ùå'}\n"
            notification_text += f"üì® –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: {unsent_notifications}\n"
            notification_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_display}\n\n"
            notification_text += f"‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω—ã:</b>\n"
            for reason in reasons:
                notification_text += f"‚Ä¢ {reason}\n"
            
            # TODO: Move to Celery for async processing
            notify(notification_text)
        
        return Response({
            'success': True,
            'message': '–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            'device_id': str(device.id),
            'device_name': device.name,
            'status_level': status_level,
            'reasons': reasons,
            'battery_level': battery_level,
            'is_charging': is_charging,
            'network_available': network_available,
            'unsent_notifications': unsent_notifications,
            'last_notification_timestamp': last_notification_timestamp.isoformat() if last_notification_timestamp else None,
            'timestamp': timestamp,
            'app_version': app_version,
            'android_version': android_version,
            'device_model': device_model,
            'battery_report_id': str(battery_report.id),
            'status_report_id': str(device_status.id)
        }, status=status.HTTP_200_OK)


class MessageView(APIView):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    permission_classes = [IsAuthenticated]
    
    @swagger_auto_schema(
        operation_summary="üö® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        operation_description="""
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ `X-TOKEN` —Å —Ç–æ–∫–µ–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**:
        - –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        - –ü–µ—Ä–µ–¥–∞—á–∞ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        
        **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è**:
        - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ `last_seen` —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        **–§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram**:
        ```
        üö® –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        
        üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: [–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞]
        ‚è∞ –í—Ä–µ–º—è: [–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è]
        üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: [–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è]
        
        üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
        [–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]
        ```
        """,
        tags=['–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['sender', 'text'],
            properties={
                'sender': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description='–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è',
                    max_length=100,
                    example='–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤'
                ),
                'text': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description='–¢–µ–∫—Å—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
                    max_length=1000,
                    example='–ü–æ–º–æ–≥–∏—Ç–µ! –ó–∞—Å—Ç—Ä—è–ª –≤ –ª–∏—Ñ—Ç–µ –Ω–∞ 5 —ç—Ç–∞–∂–µ!'
                ),
                'package_name': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description='–ò–º—è –ø–∞–∫–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: com.onlyone.app.FC)',
                    example='com.onlyone.app.FC'
                ),
                'date_created': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    format=openapi.FORMAT_DATETIME,
                    description='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (ISO 8601). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è',
                    example='2024-01-15T14:30:25Z'
                )
            }
        ),
        responses={
            201: openapi.Response(
                description="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ",
                examples={
                    "application/json": {
                        "id": "550e8400-e29b-41d4-a716-446655440002",
                        "message": "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                        "filtered": False,
                        "filter_reason": None
                    }
                }
            ),
            400: openapi.Response(
                description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                examples={
                    "application/json": {
                        "sender": ["–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ."],
                        "text": ["–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ."]
                    }
                }
            ),
            401: openapi.Response(
                description="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                examples={
                    "application/json": {
                        "detail": "Authentication credentials were not provided."
                    }
                }
            ),
            500: openapi.Response(
                description="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram",
                examples={
                    "application/json": {
                        "error": "Failed to send notification to Telegram"
                    }
                }
            )
        },
        manual_parameters=[
            openapi.Parameter(
                'X-TOKEN',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                type=openapi.TYPE_STRING,
                required=True,
                example="abc123def456ghi789"
            )
        ]
    )
    def post(self, request):
        device = request.user
        serializer = MessageSerializer(data=request.data)
        
        if serializer.is_valid():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            package_name = request.data.get('package_name', '')
            sender = request.data.get('sender', '')
            text = request.data.get('text', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            should_filter, filter_reason = NotificationFilterService.should_filter_notification(
                package_name=package_name,
                sender=sender,
                text=text
            )
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if should_filter:
                # Update device last_seen
                device.last_seen = timezone.now()
                device.save(update_fields=['last_seen'])
                
                return Response(
                    {
                        'message': f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filter_reason}',
                        'filtered': True,
                        'filter_reason': filter_reason
                    }, 
                    status=status.HTTP_200_OK
                )
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
            message = serializer.save(
                device=device,
                raw_payload=request.data,
                is_filtered=False,
                filter_reason=""
            )
            
            # Update device last_seen
            device.last_seen = timezone.now()
            device.save(update_fields=['last_seen'])
            
            # Send notification to admin chat –¢–û–õ–¨–ö–û –¥–ª—è –Ω–µ–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            notification_text = f"üö® <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n"
            notification_text += f"{device.name} {message.date_created.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            notification_text += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message.text}"
            
            # TODO: Move to Celery for async processing
            notify(notification_text)
            
            return Response(
                {
                    'id': str(message.id), 
                    'message': '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                    'filtered': False,
                    'filter_reason': None
                }, 
                status=status.HTTP_201_CREATED
            )
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class LogFileView(APIView):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ txt —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–æ–º
    """
    permission_classes = [IsAuthenticated]
    
    @swagger_auto_schema(
        operation_summary="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥ —Ñ–∞–π–ª",
        operation_description="""
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç txt —Ñ–∞–π–ª —Å –ª–æ–≥–æ–º –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ `X-TOKEN` —Å —Ç–æ–∫–µ–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**:
        - –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –æ—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–±–æ—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        
        **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è**:
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ `last_seen` —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        - –ü–∞—Ä—Å–∏–Ω–≥ txt —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        """,
        tags=['–õ–æ–≥ —Ñ–∞–π–ª—ã'],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['file'],
            properties={
                'file': openapi.Schema(
                    type=openapi.TYPE_FILE,
                    description='TXT —Ñ–∞–π–ª —Å –ª–æ–≥–æ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏',
                    format=openapi.FORMAT_BINARY
                ),
                'date_created': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    format=openapi.FORMAT_DATETIME,
                    description='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞ (ISO 8601). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è',
                    example='2024-01-15T14:30:25Z'
                )
            }
        ),
        responses={
            201: openapi.Response(
                description="–õ–æ–≥ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
                examples={
                    "application/json": {
                        "id": "550e8400-e29b-41d4-a716-446655440003",
                        "message": "–õ–æ–≥ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
                        "file_size": 1024
                    }
                }
            ),
            400: openapi.Response(
                description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                examples={
                    "application/json": {
                        "file": ["–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ."],
                        "error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã."
                    }
                }
            ),
            401: openapi.Response(
                description="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                examples={
                    "application/json": {
                        "detail": "Authentication credentials were not provided."
                    }
                }
            )
        },
        manual_parameters=[
            openapi.Parameter(
                'X-TOKEN',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                type=openapi.TYPE_STRING,
                required=True,
                example="abc123def456ghi789"
            )
        ]
    )
    def post(self, request):
        device = request.user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        if 'file' not in request.FILES:
            return Response(
                {'file': ['–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.']}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        uploaded_file = request.FILES['file']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not uploaded_file.name.lower().endswith('.txt'):
            return Response(
                {'error': '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã.'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 50 MB)
        max_size = 50 * 1024 * 1024  # 50 MB
        if uploaded_file.size > max_size:
            return Response(
                {'error': f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size // 1024 // 1024} MB'}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        data = {
            'file': uploaded_file,
            'date_created': request.data.get('date_created')
        }
        
        serializer = LogFileSerializer(data=data)
        
        if serializer.is_valid():
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
            try:
                file_content = uploaded_file.read().decode('utf-8')
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–æ
                uploaded_file.seek(0)
            except UnicodeDecodeError:
                return Response(
                    {'error': '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.'}, 
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å —Ñ–∞–π–ª–æ–º –∏ –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
            log_file = serializer.save(
                device=device,
                text=file_content[:1000] + "..." if len(file_content) > 1000 else file_content
            )
            
            # Update device last_seen
            device.last_seen = timezone.now()
            device.save(update_fields=['last_seen'])
            
            # Send notification to admin chat with file
            notification_text = f"üìÑ <b>–ù–û–í–´–ô –õ–û–ì –§–ê–ô–õ</b>\n\n"
            notification_text += f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.name}\n"
            notification_text += f"‚è∞ –í—Ä–µ–º—è: {log_file.date_created.strftime('%d.%m.%Y %H:%M:%S')}\n"
            notification_text += f"üìä –†–∞–∑–º–µ—Ä: {len(file_content)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            notification_text += f"üìÅ –§–∞–π–ª: {uploaded_file.name}\n"
            notification_text += f"üîó –°–∫–∞—á–∞—Ç—å: <a href='{log_file.file.url}'>–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª</a>"
            
            # TODO: Move to Celery for async processing
            notify(notification_text)
            
            return Response(
                {
                    'id': str(log_file.id), 
                    'message': '–õ–æ–≥ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
                    'file_size': len(file_content),
                    'file_name': uploaded_file.name
                }, 
                status=status.HTTP_201_CREATED
            )
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
