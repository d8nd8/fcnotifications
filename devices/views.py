from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from django.utils import timezone
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from .models import Device, BatteryReport, Message
from .serializers import DeviceSerializer, BatteryReportSerializer, MessageSerializer
from .notifications import notify


class DeviceView(APIView):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    """
    permission_classes = [IsAuthenticated]
    
    @swagger_auto_schema(
        operation_summary="üì± –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        operation_description="""
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
        
        **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ `X-TOKEN` —Å —Ç–æ–∫–µ–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: 
        - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """,
        tags=['–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'],
        responses={
            200: openapi.Response(
                description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞",
                schema=DeviceSerializer,
                examples={
                    "application/json": {
                        "id": "550e8400-e29b-41d4-a716-446655440000",
                        "external_id": "device_12345",
                        "token": "abc123def456ghi789",
                        "name": "–ú–æ–π iPhone",
                        "last_seen": "2024-01-15T14:30:25Z",
                        "created_at": "2024-01-01T10:00:00Z"
                    }
                }
            ),
            401: openapi.Response(
                description="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                examples={
                    "application/json": {
                        "detail": "Authentication credentials were not provided."
                    }
                }
            )
        },
        manual_parameters=[
            openapi.Parameter(
                'X-TOKEN',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                type=openapi.TYPE_STRING,
                required=True,
                example="abc123def456ghi789"
            )
        ]
    )
    def get(self, request):
        device = request.user  # This will be the Device instance from XTokenAuthentication
        serializer = DeviceSerializer(device)
        return Response(serializer.data, status=status.HTTP_200_OK)


class BatteryReportView(APIView):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞—Ç–∞—Ä–µ–∏
    """
    permission_classes = [IsAuthenticated]
    
    @swagger_auto_schema(
        operation_summary="üîã –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –±–∞—Ç–∞—Ä–µ–µ",
        operation_description="""
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ `X-TOKEN` —Å —Ç–æ–∫–µ–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**:
        - –û—Ç–ø—Ä–∞–≤–∫–∞ keep-alive —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        
        **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è**:
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ `last_seen` —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """,
        tags=['–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏'],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['battery_level'],
            properties={
                'battery_level': openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description='–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)',
                    minimum=0,
                    maximum=100,
                    example=85
                ),
                'date_created': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    format=openapi.FORMAT_DATETIME,
                    description='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (ISO 8601). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è',
                    example='2024-01-15T14:30:25Z'
                )
            }
        ),
        responses={
            201: openapi.Response(
                description="–û—Ç—á–µ—Ç –æ –±–∞—Ç–∞—Ä–µ–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                examples={
                    "application/json": {
                        "id": "550e8400-e29b-41d4-a716-446655440001",
                        "message": "–û—Ç—á–µ—Ç –æ –±–∞—Ç–∞—Ä–µ–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
                    }
                }
            ),
            400: openapi.Response(
                description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                examples={
                    "application/json": {
                        "battery_level": ["–£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100"]
                    }
                }
            ),
            401: openapi.Response(
                description="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                examples={
                    "application/json": {
                        "detail": "Authentication credentials were not provided."
                    }
                }
            )
        },
        manual_parameters=[
            openapi.Parameter(
                'X-TOKEN',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                type=openapi.TYPE_STRING,
                required=True,
                example="abc123def456ghi789"
            )
        ]
    )
    def post(self, request):
        device = request.user
        serializer = BatteryReportSerializer(data=request.data)
        
        if serializer.is_valid():
            # Create battery report
            battery_report = serializer.save(device=device)
            
            # Update device last_seen
            device.last_seen = timezone.now()
            device.save(update_fields=['last_seen'])
            
            return Response(
                {'id': str(battery_report.id), 'message': '–û—Ç—á–µ—Ç –æ –±–∞—Ç–∞—Ä–µ–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'}, 
                status=status.HTTP_201_CREATED
            )
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class MessageView(APIView):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    permission_classes = [IsAuthenticated]
    
    @swagger_auto_schema(
        operation_summary="üö® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        operation_description="""
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ `X-TOKEN` —Å —Ç–æ–∫–µ–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**:
        - –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        - –ü–µ—Ä–µ–¥–∞—á–∞ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        
        **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è**:
        - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ `last_seen` —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        **–§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram**:
        ```
        üö® –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        
        üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: [–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞]
        ‚è∞ –í—Ä–µ–º—è: [–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è]
        üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: [–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è]
        
        üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
        [–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]
        ```
        """,
        tags=['–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['sender', 'text'],
            properties={
                'sender': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description='–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è',
                    max_length=100,
                    example='–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤'
                ),
                'text': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description='–¢–µ–∫—Å—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
                    max_length=1000,
                    example='–ü–æ–º–æ–≥–∏—Ç–µ! –ó–∞—Å—Ç—Ä—è–ª –≤ –ª–∏—Ñ—Ç–µ –Ω–∞ 5 —ç—Ç–∞–∂–µ!'
                ),
                'date_created': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    format=openapi.FORMAT_DATETIME,
                    description='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (ISO 8601). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è',
                    example='2024-01-15T14:30:25Z'
                )
            }
        ),
        responses={
            201: openapi.Response(
                description="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                examples={
                    "application/json": {
                        "id": "550e8400-e29b-41d4-a716-446655440002",
                        "message": "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                    }
                }
            ),
            400: openapi.Response(
                description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                examples={
                    "application/json": {
                        "sender": ["–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ."],
                        "text": ["–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ."]
                    }
                }
            ),
            401: openapi.Response(
                description="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                examples={
                    "application/json": {
                        "detail": "Authentication credentials were not provided."
                    }
                }
            ),
            500: openapi.Response(
                description="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram",
                examples={
                    "application/json": {
                        "error": "Failed to send notification to Telegram"
                    }
                }
            )
        },
        manual_parameters=[
            openapi.Parameter(
                'X-TOKEN',
                openapi.IN_HEADER,
                description="–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                type=openapi.TYPE_STRING,
                required=True,
                example="abc123def456ghi789"
            )
        ]
    )
    def post(self, request):
        device = request.user
        serializer = MessageSerializer(data=request.data)
        
        if serializer.is_valid():
            # Create message with raw_payload
            message = serializer.save(
                device=device,
                raw_payload=request.data
            )
            
            # Update device last_seen
            device.last_seen = timezone.now()
            device.save(update_fields=['last_seen'])
            
            # Send notification to admin chat
            notification_text = f"üö® <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n"
            notification_text += f"üì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {device.name}\n"
            notification_text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {message.date_created.strftime('%d.%m.%Y %H:%M:%S')}\n"
            notification_text += f"üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {message.sender}\n\n"
            notification_text += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message.text}"
            
            # TODO: Move to Celery for async processing
            notify(notification_text)
            
            return Response(
                {'id': str(message.id), 'message': '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}, 
                status=status.HTTP_201_CREATED
            )
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
