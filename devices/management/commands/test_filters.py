from django.core.management.base import BaseCommand
from devices.models import Message
from devices.notification_filter import NotificationFilterService


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limit',
            type=int,
            default=50,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)',
        )
        parser.add_argument(
            '--package',
            type=str,
            help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞',
        )

    def handle(self, *args, **options):
        limit = options['limit']
        package_filter = options['package']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        queryset = Message.objects.all()
        if package_filter:
            queryset = queryset.filter(sender=package_filter)
        
        messages = list(queryset.order_by('-created_at')[:limit])
        
        if not messages:
            self.stdout.write('–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
            return
        
        self.stdout.write(f'–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...\n')
        
        filtered_count = 0
        allowed_count = 0
        
        for message in messages:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º sender –∫–∞–∫ package_name, —Ç–∞–∫ –∫–∞–∫ –≤ –±–∞–∑–µ package_name –ø—É—Å—Ç–æ–µ
            package_name = message.package_name or message.sender
            should_filter, reason = NotificationFilterService.should_filter_notification(
                package_name=package_name,
                sender=message.sender,
                text=message.text
            )
            
            if should_filter:
                filtered_count += 1
                status = "üö´ –ë–õ–û–ö–ò–†–û–í–ê–ù–û"
                color = self.style.ERROR
            else:
                allowed_count += 1
                status = "‚úÖ –†–ê–ó–†–ï–®–ï–ù–û"
                color = self.style.SUCCESS
            
            self.stdout.write(
                color(f'{status} | {message.sender} | {message.text[:50]}...')
            )
            if should_filter:
                self.stdout.write(f'    –ü—Ä–∏—á–∏–Ω–∞: {reason}')
            self.stdout.write('')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(messages)
        self.stdout.write('=' * 60)
        self.stdout.write(f'–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}')
        self.stdout.write(f'–ë—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {filtered_count} ({filtered_count/total*100:.1f}%)')
        self.stdout.write(f'–ë—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {allowed_count} ({allowed_count/total*100:.1f}%)')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–∞–∫–µ—Ç–æ–≤
        self.stdout.write('\n–¢–æ–ø –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π:')
        package_stats = {}
        for message in messages:
            package = message.sender
            if package not in package_stats:
                package_stats[package] = {'total': 0, 'filtered': 0}
            package_stats[package]['total'] += 1
            
            should_filter, _ = NotificationFilterService.should_filter_notification(
                package_name=message.sender,
                sender=message.sender,
                text=message.text
            )
            if should_filter:
                package_stats[package]['filtered'] += 1
        
        for package, stats in sorted(package_stats.items(), key=lambda x: x[1]['total'], reverse=True):
            if stats['total'] > 0:
                filtered_pct = stats['filtered'] / stats['total'] * 100
                self.stdout.write(
                    f'  {package}: {stats["total"]} —Å–æ–æ–±—â–µ–Ω–∏–π, '
                    f'{stats["filtered"]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ({filtered_pct:.1f}%)'
                )
