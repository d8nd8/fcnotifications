from django.core.management.base import BaseCommand
from django.utils import timezone
from devices.models import Device
from datetime import timedelta


class Command(BaseCommand):
    help = '–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--hours',
            type=int,
            default=24,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 24)'
        )
        parser.add_argument(
            '--show-details',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ'
        )

    def handle(self, *args, **options):
        hours_threshold = options['hours']
        show_details = options['show_details']
        
        now = timezone.now()
        threshold_time = now - timedelta(hours=hours_threshold)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_devices = Device.objects.count()
        online_devices = Device.objects.filter(last_seen__gte=threshold_time).count()
        offline_devices = total_devices - online_devices
        
        self.stdout.write(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–ø–æ—Ä–æ–≥: {hours_threshold} —á–∞—Å–æ–≤):')
        self.stdout.write(f'–í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {total_devices}')
        self.stdout.write(f'–û–Ω–ª–∞–π–Ω: {online_devices}')
        self.stdout.write(f'–û—Ñ–ª–∞–π–Ω: {offline_devices}')
        self.stdout.write('')
        
        if show_details:
            self.stdout.write('–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:')
            self.stdout.write('-' * 80)
            
            for device in Device.objects.all().order_by('-last_seen'):
                if device.last_seen:
                    if device.last_seen >= threshold_time:
                        status = 'üü¢ –û–ù–õ–ê–ô–ù'
                        time_info = f'{device.last_seen.strftime("%d.%m.%Y %H:%M:%S")}'
                    else:
                        hours_ago = int((now - device.last_seen).total_seconds() / 3600)
                        status = f'üü° {hours_ago}—á –Ω–∞–∑–∞–¥'
                        time_info = f'{device.last_seen.strftime("%d.%m.%Y %H:%M:%S")}'
                else:
                    status = 'üî¥ –û–§–õ–ê–ô–ù'
                    time_info = '–ù–∏–∫–æ–≥–¥–∞'
                
                self.stdout.write(
                    f'{status} | {device.name:<20} | {time_info} | {device.token}'
                )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã
        old_devices = Device.objects.filter(
            last_seen__lt=threshold_time
        ).exclude(last_seen__isnull=True).order_by('last_seen')
        
        if old_devices.exists():
            self.stdout.write('')
            self.stdout.write('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã:')
            for device in old_devices[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                hours_ago = int((now - device.last_seen).total_seconds() / 3600)
                self.stdout.write(
                    f'  {device.name} - {hours_ago}—á –Ω–∞–∑–∞–¥ ({device.last_seen.strftime("%d.%m.%Y %H:%M")})'
                )
