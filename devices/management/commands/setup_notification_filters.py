from django.core.management.base import BaseCommand
from devices.notification_filter import NotificationFilterService


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'

    def handle(self, *args, **options):
        self.stdout.write('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...')
        
        try:
            NotificationFilterService.create_default_filters()
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –§–∏–ª—å—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!')
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            from devices.models import NotificationFilter
            filters = NotificationFilter.objects.all()
            
            self.stdout.write('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:')
            for filter_obj in filters:
                status = "‚úÖ" if filter_obj.is_active else "‚ùå"
                filter_type = "üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫" if filter_obj.filter_type == 'blacklist' else "‚úÖ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"
                self.stdout.write(f'  {status} {filter_obj.package_name} - {filter_type}')
                if filter_obj.description:
                    self.stdout.write(f'    –û–ø–∏—Å–∞–Ω–∏–µ: {filter_obj.description}')
            
            self.stdout.write(f'\n–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {filters.count()}')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}')
            )
